#include "transpiler.hpp"
#include <sys/stat.h>
#include <sys/types.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>

#ifdef _WIN32
#include <direct.h>
#endif

namespace r3c {

int Transpiler::ensure_out_dir(const std::string& outdir) {
#ifdef _WIN32
  int res = _mkdir(outdir.c_str());
  if(res != 0 && errno != EEXIST) return -1;
#else
  mode_t mode = 0755;
  int res = mkdir(outdir.c_str(), mode);
  if(res != 0 && errno != EEXIST) {
    // try create parents with system call for simplicity
    std::string cmd = "mkdir -p \"" + outdir + "\"";
    res = std::system(cmd.c_str());
    if(res != 0) return -1;
  }
#endif
  return 0;
}

int Transpiler::write_text(const std::string& path, const std::string& content) {
  std::ofstream ofs(path, std::ios::binary);
  if(!ofs) return -1;
  ofs << content;
  return 0;
}

std::string Transpiler::toy_rust_stub() {
  return R"(// Auto-generated by r3c toy transpiler
#![no_std]
#[no_mangle]
pub extern "C" fn r3c_entry() -> i32 {
    0
}
// NOTE: This is a stub to demonstrate pipeline only.
)";
}

std::string Transpiler::toy_linux_x64_nasm() {
  return R"(; Auto-generated by r3c toy transpiler
; Linux x86_64: write(1, msg, len); exit(0)
BITS 64
global _start
section .data
msg db "r3c toy pipeline OK", 10
len equ $ - msg
section .text
_start:
    mov rax, 1      ; sys_write
    mov rdi, 1      ; fd=1
    mov rsi, msg
    mov rdx, len
    syscall
    mov rax, 60     ; sys_exit
    xor rdi, rdi
    syscall
)";
}

int Transpiler::run(const TranspileOptions& opt) {
  if(ensure_out_dir(opt.out_dir) != 0) {
    std::cerr << "failed to prepare out dir: " << opt.out_dir << std::endl;
    return 2;
  }
  int rc = 0;
  if(opt.emit_rust) {
    rc |= write_text(opt.out_dir + "/output.rs", toy_rust_stub());
  }
  if(opt.emit_asm) {
    rc |= write_text(opt.out_dir + "/output.asm", toy_linux_x64_nasm());
  }
  if(rc != 0) {
    std::cerr << "failed to write outputs" << std::endl;
    return 3;
  }
  std::cout << "[r3c] generated files in " << opt.out_dir << std::endl;
  return 0;
}

} // namespace r3c