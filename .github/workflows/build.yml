name: üîñ R3C Pure GCC Multi-OS Build (No LLVM / No MSVC)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"   # Îß§Ïùº ÏûêÏ†ï ÏûêÎèô ÎπåÎìú
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pure-gcc-build
  cancel-in-progress: false

jobs:
  build:
    name: "üß± Build on ${{ matrix.os }} (Pure GCC)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: üß≠ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ============================================================
      # üß© Install GCC for each platform
      # ============================================================

      - name: üß± Install GCC (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential gcc g++

      - name: üß± Install GCC (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          if [ -d "/opt/homebrew/opt/gcc" ]; then
            GCC_PATH="/opt/homebrew/opt/gcc/bin"
          elif [ -d "/usr/local/opt/gcc" ]; then
            GCC_PATH="/usr/local/opt/gcc/bin"
          else
            GCC_PATH="$(brew --prefix gcc)/bin"
          fi

          echo "‚úÖ Using GCC path: $GCC_PATH"
          echo "CC=$GCC_PATH/gcc-14" >> $GITHUB_ENV
          echo "CXX=$GCC_PATH/g++-14" >> $GITHUB_ENV
          echo "$GCC_PATH" >> $GITHUB_PATH
          rm -f CMakeCache.txt || true

      - name: üß± Install GCC (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install mingw --installargs 'ADD_CMAKE_TO_PATH=System' -y
          echo "C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin" >> $env:GITHUB_PATH
          echo "CC=C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/gcc.exe" >> $env:GITHUB_ENV
          echo "CXX=C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/g++.exe" >> $env:GITHUB_ENV
          echo "GENERATOR=MinGW Makefiles" >> $env:GITHUB_ENV

      # ============================================================
      # üèóÔ∏è Build with Pure GCC
      # ============================================================
      - name: üèóÔ∏è Build R3C (Pure GCC)
        shell: bash
        run: |
          set -e
          echo "üèóÔ∏è Building on $RUNNER_OS..."
          mkdir -p build

          if [ "$RUNNER_OS" = "macOS" ]; then
            echo "‚öôÔ∏è Forcing Pure GCC on macOS"
            cmake -B build -G "Unix Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="/opt/homebrew/opt/gcc/bin/gcc-14" \
              -DCMAKE_CXX_COMPILER="/opt/homebrew/opt/gcc/bin/g++-14" \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          elif [ "$RUNNER_OS" = "Windows" ]; then
            cmake -B build -G "MinGW Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="$CC" \
              -DCMAKE_CXX_COMPILER="$CXX" \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          fi

          cmake --build build --config Release -v
          ls -lah build

      # ============================================================
      # ‚úÖ Verify Compiler Identity
      # ============================================================
      - name: üîé Verify Pure GCC
        shell: bash
        run: |
          echo "üîé Verifying GCC identity..."
          CACHE_FILE="build/CMakeCache.txt"

          if [ ! -f "$CACHE_FILE" ]; then
            echo "‚ö†Ô∏è Warning: CMakeCache.txt not found, skipping strict check."
            exit 0
          fi

          COMP_ID=$(grep "CMAKE_CXX_COMPILER_ID:" "$CACHE_FILE" | cut -d'=' -f2 | tr -d ' ')
          echo "Detected Compiler ID: ${COMP_ID:-<none>}"

          if [ -z "$COMP_ID" ]; then
            echo "‚ö†Ô∏è No compiler ID found ‚Äî assuming build succeeded (fallback OK)."
            exit 0
          fi

          if [ "$COMP_ID" != "GNU" ]; then
            echo "‚ùå Non-GCC compiler detected ($COMP_ID)!"
            exit 1
          fi

          echo "‚úÖ Verified: Pure GCC build confirmed."

      # ============================================================
      # üì¶ Package Artifacts
      # ============================================================
      - name: üì¶ Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          tar -czf dist/r3c-${{ matrix.os }}-gcc.tar.gz -C build .
          sha256sum dist/r3c-${{ matrix.os }}-gcc.tar.gz > dist/SHA256SUMS.txt
          cat dist/SHA256SUMS.txt

      - name: üíæ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}-gcc
          path: dist/
          if-no-files-found: error
          retention-days: 7
