name: R3C Solo Autonomous Build (v14-cross-safe-stable)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup environment
      - name: ‚öôÔ∏è Setup environment
        shell: bash
        run: |
          echo "Setting up environment for $RUNNER_OS"
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake g++ zip
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install cmake zip || true
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install zip -y || echo "zip already available"
          fi

      # 3Ô∏è‚É£ Generate stubs (Cross-Platform safe)
      - name: üß© Generate stubs
        shell: bash
        run: |
          echo "Detecting stub generator..."
          if [ "$RUNNER_OS" = "Windows" ]; then
            if [ -f "scripts/generate_stubs.ps1" ]; then
              echo "Running PowerShell stub generator..."
              pwsh scripts/generate_stubs.ps1
            else
              echo "No PowerShell stub found, skipping."
            fi
          else
            if [ -f "scripts/generate_stubs.sh" ]; then
              echo "Running Bash stub generator..."
              bash scripts/generate_stubs.sh
            else
              echo "No Bash stub found, skipping."
            fi
          fi

      # 4Ô∏è‚É£ Build project
      - name: üèóÔ∏è Build project
        shell: bash
        run: |
          cmake -B build -S .
          cmake --build build --config Release

      # 5Ô∏è‚É£ Package artifacts (OS-aware ZIP)
      - name: üóúÔ∏è Package Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "Compressing with PowerShell Compress-Archive..."
            pwsh -Command "Compress-Archive -Path build/* -DestinationPath artifacts/r3c_${{ runner.os }}.zip"
          else
            echo "Compressing with zip..."
            zip -r artifacts/r3c_${{ runner.os }}.zip build/
          fi
          echo "‚úÖ Artifacts created:"
          ls -lh artifacts

      # 6Ô∏è‚É£ Upload artifacts
      - name: üì§ Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}
          path: artifacts/*.zip

      # 7Ô∏è‚É£ Verify artifact presence
      - name: üß™ Verify Artifacts
        shell: bash
        run: |
          echo "Verifying artifact existence..."
          ls -R artifacts || echo "‚ùå No artifacts found!"
