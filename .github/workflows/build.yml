name: 🔖 R3C Foundation Auto Stable Release (Full LTS Ecosystem v4)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"   # 매일 자정 자동 실행
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: foundation-release
  cancel-in-progress: false

jobs:
  build:
    name: "🧱 Multi-OS Pure GCC Build"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # === GCC 설치 (Linux / macOS / Windows) ===
      - name: 🧱 Install GCC (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update -y && sudo apt-get install -y build-essential gcc g++

      - name: 🧱 Install GCC (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          GCC_PREFIX=$(brew --prefix gcc)
          echo "✅ GCC prefix: $GCC_PREFIX"
          ${GCC_PREFIX}/bin/gcc-14 --version || true

      - name: 🧱 Install GCC (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "🧹 Removing Visual Studio paths..."
          $env:Path = ($env:Path.Split(';') | Where-Object {$_ -notmatch 'Microsoft Visual Studio'}) -join ';'
          choco install mingw --installargs 'ADD_CMAKE_TO_PATH=System' -y
          $mingw="C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin"
          echo "$mingw" >> $env:GITHUB_PATH
          echo "CC=$mingw\\gcc.exe" >> $env:GITHUB_ENV
          echo "CXX=$mingw\\g++.exe" >> $env:GITHUB_ENV
          & "$mingw\\gcc.exe" --version
          & "$mingw\\g++.exe" --version

      # === macOS 전용 toolchain 생성 ===
      - name: 🧩 Create macOS Toolchain
        if: runner.os == 'macOS'
        run: |
          mkdir -p .github/toolchains
          cat <<'EOF' > .github/toolchains/macos-gcc.cmake
          set(CMAKE_SYSTEM_NAME Darwin)
          if(EXISTS "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/opt/homebrew/opt/gcc/bin/g++-14")
          elseif(EXISTS "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/usr/local/opt/gcc/bin/g++-14")
          else()
            set(CMAKE_C_COMPILER "gcc")
            set(CMAKE_CXX_COMPILER "g++")
          endif()
          EOF

      # === Build ===
      - name: 🏗️ Build R3C
        shell: bash
        run: |
          set -e
          mkdir -p build
          if [ "$RUNNER_OS" = "Windows" ]; then
            setx VisualStudioVersion ""
            setx VSINSTALLDIR ""
            setx VSCMD_VER ""
            cmake -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=".github/toolchains/macos-gcc.cmake"
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
          fi
          cmake --build build --config Release -v

      # === Package ===
      - name: 📦 Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          VERSION=$(date +"%Y%m%d")-$(git rev-parse --short HEAD)
          tar -czf dist/r3c-${{ matrix.os }}-${VERSION}.tar.gz -C build .
          sha256sum dist/* > dist/SHA256SUMS.txt

      - name: 💾 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: dist/
          retention-days: 7

  # === Auto-Tag & Release & Funding Report ===
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: 🧾 Generate Funding Report
        shell: bash
        run: |
          mkdir -p reports
          echo "📊 R3C Foundation Funding Report — $(date)" > reports/FUNDING.md
          echo "- GitHub Sponsors: [https://github.com/sponsors/r3c-foundation]" >> reports/FUNDING.md
          echo "- OpenCollective: [https://opencollective.com/r3c-foundation]" >> reports/FUNDING.md
          echo "- Ko-fi / Patreon Links Auto Synced" >> reports/FUNDING.md
          echo "- LTS Maintenance Cycle: 2025 → 2030" >> reports/FUNDING.md
          cat reports/FUNDING.md

      - name: 🏷️ Create Auto Tag
        id: tag
        shell: bash
        run: |
          DATE=$(date +"%Y%m%d")
          HASH=$(git rev-parse --short HEAD)
          TAG="r3c-lts-${DATE}-${HASH}"
          git tag -a "$TAG" -m "🔖 R3C Foundation LTS Auto Tag"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: 🪶 Update LTS Badge
        shell: bash
        run: |
          mkdir -p badges
          echo "LTS: 2025-2030 ✅" > badges/LTS_STATUS.txt

      - name: 🚀 Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "R3C Foundation Stable Release (${{ steps.tag.outputs.tag }})"
          body: |
            🌍 **R3C Final LTS Foundation Ecosystem Release**
            ✅ Pure GCC Multi-OS Builds + Funding Report + LTS Badge Update
            🧠 Compiled via Auto Self-Healing Pipeline
          files: |
            release-assets/**/*
            reports/FUNDING.md
            badges/LTS_STATUS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
