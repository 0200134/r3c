name: R3C Cross-Platform Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ 캐시 초기화 (CMakeCache.txt 경로 충돌 완전 방지)
      - name: Reset old CMake build cache
        shell: bash
        run: |
          echo "[r3c] Resetting old build cache..."
          rm -rf build CMakeCache.txt || true

      # 3️⃣ NASM 설치
      - name: Setup NASM
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then choco install nasm -y; fi
          if [ "$RUNNER_OS" == "Linux" ]; then sudo apt-get update && sudo apt-get install -y nasm; fi
          if [ "$RUNNER_OS" == "macOS" ]; then brew install nasm; fi

      # 4️⃣ CMake 설치
      - name: Setup CMake
        uses: lukka/get-cmake@latest

      # 5️⃣ 빌드 설정
      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      # 6️⃣ 빌드
      - name: Build project
        run: cmake --build build --config Release -- -j4

      # 7️⃣ 테스트 실행 (옵션)
      - name: Run internal tests
        continue-on-error: true
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then ./build/Release/r3c.exe test || exit 0; fi
          if [ "$RUNNER_OS" == "Linux" ]; then ./build/r3c test || exit 0; fi
          if [ "$RUNNER_OS" == "macOS" ]; then ./build/r3c test || exit 0; fi

      # 8️⃣ 빌드 결과 업로드
      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: |
            build/r3c*
            build/Release/r3c.exe

  # ---------------------------
  # ✅ Release 자동화 (태그 푸시 시 실행)
  # ---------------------------
  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release Notes
        id: notes
        run: |
          echo "R3C Release $(date)" > release_notes.txt
          echo "" >> release_notes.txt
          git log -1 --pretty=format:"%h - %s (%an)" >> release_notes.txt

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.txt
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
