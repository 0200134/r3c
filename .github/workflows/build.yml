name: ⚙️ R3C Cross-Platform Autonomous Build (v7.0 Self-Healing)

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # -------------------------------------------------------------
      # ① Self-Fix 단계 : 자동으로 include/json 누락 복구
      # -------------------------------------------------------------
      - name: 🧠 Self-Fix before build
        run: |
          echo "🩹 Running pre-build self-fix..."
          mkdir -p include/nlohmann
          # r3c.hpp 자동 생성
          if [ ! -f include/r3c.hpp ]; then
            echo "Creating include/r3c.hpp..."
            cat > include/r3c.hpp <<'EOF'
#pragma once
#include <string>
#include <vector>
#include <cstdio>

int run_pipeline(const std::vector<std::string>& args,
                 const std::string& manifest,
                 bool emit_asm,
                 bool emit_rust,
                 const std::string& out_dir,
                 bool verbose);

inline void r3c_banner() {
    printf("=====================================================\n");
    printf("[r3c] Rust LTS transpiler + NASM bootstrap pipeline\n");
    printf("=====================================================\n");
}
EOF
          fi

          # json.hpp 자동 다운로드
          if [ ! -f include/nlohmann/json.hpp ]; then
            echo "Downloading nlohmann/json.hpp..."
            curl -L https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp \
              -o include/nlohmann/json.hpp
          fi

          # r3cpkg.cpp에 json include 삽입
          if [ -f src/r3cpkg.cpp ]; then
            if ! grep -q "nlohmann/json.hpp" src/r3cpkg.cpp; then
              echo "Injecting include into r3cpkg.cpp"
              sed -i '1i #include <nlohmann/json.hpp>\nusing json = nlohmann::json;\n' src/r3cpkg.cpp || true
            fi
          fi

      # -------------------------------------------------------------
      # ② 의존성 설치
      # -------------------------------------------------------------
      - name: 🧱 Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install -y cmake g++ nasm

      - name: 🧱 Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake nasm || true

      - name: 🧱 Setup Windows build tools
        if: runner.os == 'Windows'
        shell: bash
        run: choco install nasm cmake --yes || true

      # -------------------------------------------------------------
      # ③ CMake 구성 및 빌드 시도
      # -------------------------------------------------------------
      - name: 🧩 Configure project
        shell: bash
        run: cmake -B build -S . -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: 🏗️ Build with 3 retries
        shell: bash
        run: |
          echo "⚙️ Building on $RUNNER_OS..."
          for i in 1 2 3; do
            echo "🔁 Attempt $i..."
            if cmake --build build --config Release --parallel 4; then
              echo "✅ Build succeeded on attempt $i"
              exit 0
            else
              echo "⚠️ Build failed attempt $i"
            fi
          done
          echo "❌ Build failed after 3 attempts"
          exit 1

      # -------------------------------------------------------------
      # ④ 실패 로그 표시 (debug)
      # -------------------------------------------------------------
      - name: 🧠 Show last 100 lines
        if: failure()
        shell: bash
        run: |
          echo "🧩 Showing last 100 lines of logs..."
          find build -type f | grep -E ".log|CMake.*txt" | head -n 1 | xargs -r tail -n 100 || true

      # -------------------------------------------------------------
      # ⑤ Auto Commit Fix (optional)
      # -------------------------------------------------------------
      - name: 💾 Commit and Push Fixes
        if: failure()
        run: |
          git config user.name "r3c-bot"
          git config user.email "bot@r3c.local"
          git add include src CMakeLists.txt || true
          git commit -m "🤖 auto-fix (build.yml self-healing pass)" || echo "No changes"
          git push || echo "No push needed"
