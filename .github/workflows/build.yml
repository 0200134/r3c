name: 🔖 R3C Pure GCC Stable Release (3OS Autonomous v8.4)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"  # 매일 자정 자동 빌드
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pure-gcc-build
  cancel-in-progress: false

jobs:
  build:
    name: 🧱 Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      TAG: v${{ github.run_number }}-${{ matrix.os }}-puregcc

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ======================================================
      # 🍎 macOS: Homebrew GNU GCC 설치 및 Clang 완전 차단
      # ======================================================
      - name: 🍎 Setup Pure GCC on macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "🍎 Installing GNU GCC on macOS..."
          brew update
          brew install gcc || true

          GCC_PREFIX=$(brew --prefix gcc)
          echo "🔍 GCC path: $GCC_PREFIX"
          export PATH="$GCC_PREFIX/bin:$PATH"
          export CC="$GCC_PREFIX/bin/gcc-13"
          export CXX="$GCC_PREFIX/bin/g++-13"

          echo "✅ Using compiler:"
          which $CC
          $CC --version

          if $CC --version | grep -q "clang"; then
            echo "❌ Clang detected — Pure GCC mode violation!"
            exit 1
          fi

      # ======================================================
      # 🪟 Windows: MinGW 기반 GNU GCC 환경 준비
      # ======================================================
      - name: 🪟 Setup MinGW GCC on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "🪟 Setting up MinGW-w64 GCC..."
          choco install mingw --yes --no-progress
          echo "PATH: $PATH"
          export PATH="/c/ProgramData/chocolatey/bin:$PATH"
          gcc --version || { echo "❌ GCC not found!"; exit 1; }

      # ======================================================
      # 🐧 Linux: System GCC 확인
      # ======================================================
      - name: 🐧 Verify GCC on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
          gcc --version
          which gcc

      # ======================================================
      # 🧱 Build R3C (Pure GCC Mode)
      # ======================================================
      - name: 🧱 Build
        shell: bash
        run: |
          echo "🏗️ Building on $RUNNER_OS..."
          mkdir -p build
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          ls -lah build

      # ======================================================
      # 📦 Package & Hash
      # ======================================================
      - name: 📦 Package
        shell: bash
        run: |
          mkdir -p dist
          ARCHIVE="r3c-${{ matrix.os }}.tar.gz"
          tar -czf "dist/$ARCHIVE" -C build .
          sha256sum dist/$ARCHIVE > dist/SHA256SUMS-${{ matrix.os }}.txt

      # ======================================================
      # 💾 Upload Artifacts
      # ======================================================
      - name: 💾 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: dist/
          if-no-files-found: error
          retention-days: 7

  release:
    name: 🚀 Release Pure GCC Build
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🧭 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_dist

      - name: 🧮 Combine SHA256
        run: |
          cat release_dist/**/SHA256SUMS-*.txt > release_dist/SHA256SUMS.txt
          cat release_dist/SHA256SUMS.txt

      - name: 🪶 Create Tag
        run: |
          TAG="v$(date -u +'%y.%m.%d-%H%M')-puregcc"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: 🧱 Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        with:
          tag_name: ${{ env.TAG }}
          name: "R3C ${TAG} (Absolute Pure GCC)"
          body: |
            ### 🔒 R3C Pure GCC Stable Ecosystem v8.4
            ✅ No LLVM / No MSVC / No Clang  
            ✅ 3OS verified autonomous build  
            ✅ Deterministic release integrity  
            _Generated automatically on $(date -u)_
          files: |
            release_dist/**/r3c-*.tar.gz
            release_dist/SHA256SUMS.txt

      - name: ✅ Done
        run: echo "Pure GCC Build complete ✅"
