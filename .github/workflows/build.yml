name: 🔖 R3C Autonomous Stable Release v7.4 (3OS + PureGCC + AutoSchedule)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
  schedule:
    # 매일 오전 9시(KST) → UTC 기준 0시
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: stable-release
  cancel-in-progress: false

jobs:
  build-and-release:
    name: "3OS Build (PureGCC)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      TAG: v${{ github.run_number }}-${{ matrix.os }}-auto-v7.4

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # =============================
      # 🪟 Windows (Pure MinGW)
      # =============================
      - name: 🧱 Build on Windows (Pure MinGW)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "🏗️ Building on Windows (Pure MinGW)..."
          choco install mingw -y
          export PATH="/c/ProgramData/chocolatey/bin:/c/tools/mingw64/bin:$PATH"
          echo "🧩 Checking compiler..."
          which g++ || { echo "❌ g++ not found"; exit 1; }
          g++ --version || true

          echo "⚙️ Running CMake..."
          cmake -G "MinGW Makefiles" -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target r3c_cli
          ls -lah build

      # =============================
      # 🐧 Linux
      # =============================
      - name: 🧱 Build on Linux
        if: runner.os == 'Linux'
        run: |
          echo "🏗️ Building on Linux..."
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target r3c_cli
          ls -lah build

      # =============================
      # 🍎 macOS
      # =============================
      - name: 🧱 Build on macOS
        if: runner.os == 'macOS'
        run: |
          echo "🏗️ Building on macOS..."
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target r3c_cli
          ls -lah build

      # =============================
      # 🧪 Smoke Test
      # =============================
      - name: 🔎 Smoke Test
        shell: bash
        run: |
          exe=$(find build -type f \( -name "r3c_cli" -o -name "r3c_cli.exe" \) | head -n1 || true)
          if [ -n "$exe" ]; then
            echo "✅ Found executable: $exe"
            "$exe" --help || echo "⚠️ CLI test skipped."
          else
            echo "⚠️ No CLI found!"
          fi

      # =============================
      # 📦 Package & Hash
      # =============================
      - name: 📦 Package & Hash
        shell: bash
        run: |
          mkdir -p dist
          ARCHIVE="r3c-${{ matrix.os }}.tar.gz"
          tar -czf "dist/$ARCHIVE" -C build .
          python3 - << 'PY'
import hashlib, os
p = "dist/" + os.environ.get("ARCHIVE","archive.tar.gz")
h = hashlib.sha256()
with open(p,"rb") as f:
    for b in iter(lambda:f.read(1024*1024), b""):
        h.update(b)
open(f"dist/SHA256SUMS-${{ matrix.os }}.txt","w").write(f"{h.hexdigest()}  {os.path.basename(p)}\n")
print("✅ SHA256:", h.hexdigest())
PY

      - name: 💾 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: dist/
          if-no-files-found: error
          retention-days: 7

  # =============================
  # 📊 Release + Integrity Report
  # =============================
  release-and-report:
    name: "📊 Release + Integrity Report"
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_dist

      - name: 🧮 Combine hashes
        run: |
          find release_dist -type f -name "SHA256SUMS-*.txt" -exec cat {} + > release_dist/SHA256SUMS.txt
          cat release_dist/SHA256SUMS.txt

      - name: 🪶 Generate tag
        id: tag
        run: |
          TAG="v$(date -u +'%y.%m.%d-%H%M')-auto-v7.4"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: 🧾 Create release notes
        run: |
          {
            echo "### R3C v7.4 Automated PureGCC Release"
            echo ""
            echo "✅ Pure GCC (No Visual Studio / No LLVM)"
            echo "🕘 Scheduled Daily Auto-Build (09:00 KST)"
            echo "🧩 Verified 3OS: Windows / macOS / Linux"
            echo ""
            echo "📦 SHA256 checksums:"
            cat release_dist/SHA256SUMS.txt
            echo ""
            echo "_Generated on $(date -u)_"
          } > release_dist/RELEASE_NOTE.txt

      - name: 🧱 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        with:
          tag_name: ${{ env.TAG }}
          name: "R3C ${{ env.TAG }} (Auto + PureGCC + 3OS)"
          body_path: release_dist/RELEASE_NOTE.txt
          files: |
            release_dist/**/r3c-*.tar.gz
            release_dist/SHA256SUMS.txt

      - name: ✅ Done
        run: echo "R3C v7.4 scheduled PureGCC build complete ✅"
