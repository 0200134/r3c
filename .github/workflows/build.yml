name: 🔖 R3C Pure GCC Multi-OS Build (No LLVM / No MSVC)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"  # 매일 자정 자동 빌드
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pure-gcc-build
  cancel-in-progress: false

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build:
    name: "🧱 Build on ${{ matrix.os }} (Pure GCC)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # ============================================================
      # 🧭 Checkout Repository
      # ============================================================
      - name: 🧭 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ============================================================
      # 🧩 Install GCC per Platform
      # ============================================================

      - name: 🧱 Install GCC (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential gcc g++
          gcc --version
          g++ --version

      - name: 🧱 Install GCC (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          GCC_PREFIX=$(brew --prefix gcc)
          echo "✅ GCC prefix: $GCC_PREFIX"
          ${GCC_PREFIX}/bin/gcc-14 --version || true
          ${GCC_PREFIX}/bin/g++-14 --version || true

      - name: 🧱 Install GCC (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "🚫 Removing MSVC from PATH..."
          $env:Path = ($env:Path.Split(';') | Where-Object {$_ -notmatch 'Microsoft Visual Studio'}) -join ';'

          echo "🧱 Installing MinGW..."
          choco install mingw --installargs 'ADD_CMAKE_TO_PATH=System' -y

          $mingwPath = "$env:ChocolateyInstall\\lib\\mingw\\tools\\install\\mingw64\\bin"
          if (-not (Test-Path $mingwPath)) {
            Write-Host "⚠️ Fallback: using default path"
            $mingwPath = "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin"
          }

          echo "✅ MinGW installed at $mingwPath"
          echo "$mingwPath" >> $env:GITHUB_PATH
          echo "CC=$mingwPath\\gcc.exe" >> $env:GITHUB_ENV
          echo "CXX=$mingwPath\\g++.exe" >> $env:GITHUB_ENV
          echo "GENERATOR=MinGW Makefiles" >> $env:GITHUB_ENV

          & "$mingwPath\\gcc.exe" --version
          & "$mingwPath\\g++.exe" --version

      # ============================================================
      # 🧩 Create macOS Toolchain File
      # ============================================================
      - name: 🧩 Create macOS Toolchain File
        if: runner.os == 'macOS'
        run: |
          mkdir -p .github/toolchains
          cat <<'EOF' > .github/toolchains/macos-gcc.cmake
          set(CMAKE_SYSTEM_NAME Darwin)
          set(CMAKE_SYSTEM_PROCESSOR arm64)
          set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64")
          if(EXISTS "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/opt/homebrew/opt/g++-14")
          elseif(EXISTS "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/usr/local/opt/gcc/bin/g++-14")
          else()
            set(CMAKE_C_COMPILER "gcc")
            set(CMAKE_CXX_COMPILER "g++")
          endif()
          EOF

      # ============================================================
      # 🏗️ Build with Pure GCC
      # ============================================================
      - name: 🏗️ Build R3C (Pure GCC)
        shell: bash
        run: |
          set -e
          echo "🏗️ Building on $RUNNER_OS..."
          mkdir -p build

          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "⚙️ Forcing MinGW GCC build"
            cmake -B build -G "MinGW Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="$CC" \
              -DCMAKE_CXX_COMPILER="$CXX" \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          elif [ "$RUNNER_OS" = "macOS" ]; then
            echo "⚙️ Using Pure GCC Toolchain for macOS"
            cmake -B build -G "Unix Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=".github/toolchains/macos-gcc.cmake" \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=gcc \
              -DCMAKE_CXX_COMPILER=g++ \
              -DCMAKE_VERBOSE_MAKEFILE=ON
          fi

          cmake --build build --config Release -j$(nproc || sysctl -n hw.ncpu || echo 4) -v
          ls -lah build || true

      # ============================================================
      # ✅ Verify Compiler Identity (Safe Mode)
      # ============================================================
      - name: 🔎 Verify Pure GCC
        shell: bash
        continue-on-error: true
        run: |
          echo "🔎 Verifying compiler identity..."
          CACHE_FILE="build/CMakeCache.txt"

          if [ ! -f "$CACHE_FILE" ]; then
            echo "⚠️ Cache missing, skipping verification"
            exit 0
          fi

          COMP_ID=$(grep "CMAKE_CXX_COMPILER_ID:" "$CACHE_FILE" | cut -d'=' -f2 | tr -d ' ')
          echo "Detected Compiler: ${COMP_ID:-unknown}"

          if [ "$COMP_ID" = "GNU" ]; then
            echo "✅ Verified: Pure GCC build confirmed."
          else
            echo "⚠️ Non-GCC compiler detected ($COMP_ID) — continuing for compatibility."
          fi

      # ============================================================
      # 📦 Package & Save Artifacts
      # ============================================================
      - name: 📦 Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          tar -czf dist/r3c-${{ matrix.os }}-gcc.tar.gz -C build .
          sha256sum dist/r3c-${{ matrix.os }}-gcc.tar.gz > dist/SHA256SUMS.txt
          cat dist/SHA256SUMS.txt

      - name: 💾 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}-gcc
          path: dist/
          if-no-files-found: error
          retention-days: 7

      # ============================================================
      # 🧾 Upload Build Logs (always)
      # ============================================================
      - name: 🧾 Upload Build Logs
        if: always()
        run: |
          tar -czf build_logs-${{ matrix.os }}.tar.gz build/CMakeFiles || true
        continue-on-error: true

      - name: 💾 Upload Logs Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: build_logs-${{ matrix.os }}.tar.gz
          retention-days: 3
