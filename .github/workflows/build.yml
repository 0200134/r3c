name: üîñ R3C Foundation Auto Stable Release (Full LTS Ecosystem v3.3.2 Final)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"  # Îß§Ïùº ÏûêÏ†ï ÏûêÎèô Ïã§Ìñâ
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: foundation-lts-release
  cancel-in-progress: false

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build:
    name: "üß± Build on ${{ matrix.os }} (Pure GCC)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # ============================================================
      # üß≠ Checkout
      # ============================================================
      - name: üß≠ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ============================================================
      # üß© Ensure Version Header Template (Absolute Path Fix)
      # ============================================================
      - name: üß© Ensure Version Header Template
        shell: bash
        run: |
          mkdir -p "$GITHUB_WORKSPACE/include"
          cat > "$GITHUB_WORKSPACE/include/r3c_version.h.in" <<'EOF'
          #pragma once
          #define R3C_VERSION_HASH      "@GIT_HASH@"
          #define R3C_BUILD_DATE        "@BUILD_DATE@"
          #define R3C_PLATFORM_NAME     "@PLATFORM_NAME@"
          #define R3C_LTS_VERSION       "@LTS_VERSION@"
          EOF
          echo "‚úÖ Generated $GITHUB_WORKSPACE/include/r3c_version.h.in"

      # ============================================================
      # üß± Install GCC (Linux)
      # ============================================================
      - name: üß± Install GCC (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential gcc g++
          gcc --version && g++ --version

      # ============================================================
      # üß± Install GCC (macOS)
      # ============================================================
      - name: üß± Install GCC (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          GCC_PREFIX=$(brew --prefix gcc)
          echo "‚úÖ GCC prefix: $GCC_PREFIX"
          ${GCC_PREFIX}/bin/gcc-14 --version || true
          ${GCC_PREFIX}/bin/g++-14 --version || true

      # ============================================================
      # üß± Install and Configure MinGW (Windows)
      # ============================================================
      - name: üß± Install and Configure MinGW (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "üö´ Removing MSVC paths..."
          $env:Path = ($env:Path.Split(';') | Where-Object {$_ -notmatch 'Microsoft Visual Studio'}) -join ';'
          choco install mingw --installargs 'ADD_CMAKE_TO_PATH=System' -y
          $paths = @(
            "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\bin",
            "C:\\ProgramData\\mingw64\\bin",
            "C:\\tools\\mingw64\\bin"
          )
          $mingwPath = $paths | Where-Object { Test-Path "$_\\gcc.exe" } | Select-Object -First 1
          if (-not $mingwPath) { Write-Host "‚ùå MinGW not found."; exit 1 }
          Write-Host "‚úÖ MinGW found: $mingwPath"
          echo "$mingwPath" >> $env:GITHUB_PATH
          echo "CC=$mingwPath\\gcc.exe" >> $env:GITHUB_ENV
          echo "CXX=$mingwPath\\g++.exe" >> $env:GITHUB_ENV
          echo "CMAKE_GENERATOR=MinGW Makefiles" >> $env:GITHUB_ENV
          & "$mingwPath\\gcc.exe" --version
          & "$mingwPath\\g++.exe" --version

      # ============================================================
      # üß© Create macOS Toolchain File
      # ============================================================
      - name: üß© Create macOS Toolchain File
        if: runner.os == 'macOS'
        run: |
          mkdir -p .github/toolchains
          cat <<'EOF' > .github/toolchains/macos-gcc.cmake
          set(CMAKE_SYSTEM_NAME Darwin)
          set(CMAKE_SYSTEM_PROCESSOR arm64)
          set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64")
          if(EXISTS "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/opt/homebrew/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/opt/homebrew/opt/g++-14")
          elseif(EXISTS "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_C_COMPILER "/usr/local/opt/gcc/bin/gcc-14")
            set(CMAKE_CXX_COMPILER "/usr/local/opt/g++-14")
          else()
            set(CMAKE_C_COMPILER "gcc")
            set(CMAKE_CXX_COMPILER "g++")
          endif()
          EOF

      # ============================================================
      # üèóÔ∏è Build (Pure GCC only)
      # ============================================================
      - name: üèóÔ∏è Build R3C
        shell: bash
        run: |
          set -e
          echo "üèóÔ∏è Building on $RUNNER_OS..."
          mkdir -p build
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$CC" -DCMAKE_CXX_COMPILER="$CXX"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=".github/toolchains/macos-gcc.cmake"
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
          fi
          cmake --build build --config Release -j$(nproc || sysctl -n hw.ncpu || echo 4)
          ls -lah build || true

      # ============================================================
      # üì¶ Package Artifacts
      # ============================================================
      - name: üì¶ Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          VERSION=$(date +"%Y%m%d")-$(git rev-parse --short HEAD)
          tar -czf dist/r3c-${{ matrix.os }}-${VERSION}.tar.gz -C build .
          sha256sum dist/* > dist/SHA256SUMS-${{ matrix.os }}.txt
          cat dist/SHA256SUMS-${{ matrix.os }}.txt

      - name: üíæ Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}-gcc
          path: dist/
          retention-days: 7

  # ============================================================
  # üè∑Ô∏è Auto Tag & Release
  # ============================================================
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: üß≠ Checkout
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Git Identity
        run: |
          git config --global user.name "r3c-foundation-bot"
          git config --global user.email "bot@r3c.foundation"

      - name: üíæ Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: üîó Merge SHA256SUMS
        run: |
          find release-assets -name "SHA256SUMS-*.txt" -exec cat {} + > release-assets/SHA256SUMS_ALL.txt
          cat release-assets/SHA256SUMS_ALL.txt

      - name: üßæ Funding Report
        run: |
          mkdir -p reports
          echo "üìä **R3C Foundation Funding Report ‚Äî $(date)**" > reports/FUNDING.md
          echo "- GitHub Sponsors: [https://github.com/sponsors/r3c-foundation]" >> reports/FUNDING.md
          echo "- OpenCollective: [https://opencollective.com/r3c-foundation]" >> reports/FUNDING.md
          echo "- LTS Maintenance: 2025 ‚Üí 2030" >> reports/FUNDING.md

      - name: üè∑Ô∏è Tag
        id: tag
        run: |
          DATE=$(date +"%Y%m%d")
          HASH=$(git rev-parse --short HEAD)
          TAG="r3c-lts-${DATE}-${HASH}"
          git tag -a "$TAG" -m "üîñ R3C Foundation Auto LTS Tag"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: ü™∂ LTS Badge
        run: |
          mkdir -p badges
          echo "LTS: 2025‚Äì2030 ‚úÖ" > badges/LTS_STATUS.txt

      - name: üöÄ Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "R3C Foundation Stable Release (${{ steps.tag.outputs.tag }})"
          body: |
            üåç **R3C LTS Foundation Ecosystem v3.3.2 Final**
            ‚úÖ Absolute Path Fix for Header + Pure GCC Multi-OS Builds
            üß† Self-Healing Compiler Pipeline | LTSS 2025‚Äì2030
          files: |
            release-assets/**/*.tar.gz
            release-assets/SHA256SUMS_ALL.txt
            reports/FUNDING.md
            badges/LTS_STATUS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
