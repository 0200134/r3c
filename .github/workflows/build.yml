name: ðŸ§© R3C Cross-Platform Build (stable)

on:
  push:
  pull_request:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.28.3"

      - name: Configure (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Configure (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake -B build -S . -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build build --config Release -j

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake --build build --config Release --target r3c_cli

      - name: Demo generate outputs
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./build/Release/r3c_cli.exe --outdir build/out
          else
            ./build/r3c_cli --outdir build/out
          fi
          ls -la build/out || true

      - name: Assemble & link on Ubuntu (demo proof)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y nasm
          nasm -felf64 build/out/output.asm -o build/out/output.o
          ld -o build/out/r3c_demo build/out/output.o
          file build/out/r3c_demo || true
          echo "Size:"; stat -c%s build/out/r3c_demo

      - name: Package artifact
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p dist
          cp -r build/out dist/
          if [[ -f build/out/r3c_demo ]]; then cp build/out/r3c_demo dist/; fi
          tar -czf r3c-${{ matrix.os }}.tar.gz -C dist .

      - name: Package artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item build\out dist\ -Recurse -Force
          Compress-Archive -Path dist\* -DestinationPath r3c-windows-latest.zip -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: |
            r3c-${{ matrix.os }}.tar.gz
            r3c-windows-latest.zip
          if-no-files-found: ignore