name: R3C Cross-Platform Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # --------------------------------------
      # 1️⃣ Checkout repository
      # --------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------------------
      # 2️⃣ Clean old build cache (cross-platform)
      # --------------------------------------
      - name: Clean old CMake cache
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path CMakeCache.txt) { Remove-Item CMakeCache.txt -Force }
          if (Test-Path b) { Remove-Item b -Recurse -Force }

      # --------------------------------------
      # 3️⃣ Install NASM
      # --------------------------------------
      - name: Setup NASM
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then choco install nasm -y; fi
          if [ "$RUNNER_OS" == "Linux" ]; then sudo apt-get update && sudo apt-get install -y nasm; fi
          if [ "$RUNNER_OS" == "macOS" ]; then brew install nasm; fi

      # --------------------------------------
      # 4️⃣ Setup CMake
      # --------------------------------------
      - name: Setup CMake
        uses: lukka/get-cmake@latest

      # --------------------------------------
      # 5️⃣ Configure (short build dir for Windows)
      # --------------------------------------
      - name: Configure CMake
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake -B b -S . -DCMAKE_BUILD_TYPE=Release
          else
            cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          fi

      # --------------------------------------
      # 6️⃣ Build (Windows uses /m, others use -j4)
      # --------------------------------------
      - name: Build Project
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build b --config Release -- /m
          else
            cmake --build build --config Release -- -j4
          fi

      # --------------------------------------
      # 7️⃣ Run internal tests
      # --------------------------------------
      - name: Run Tests
        continue-on-error: true
        shell: bash
        run: |
          echo "[r3c] Running internal test..."
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./b/Release/r3c.exe test || exit 0
          elif [ "$RUNNER_OS" == "Linux" ]; then
            ./build/r3c test || exit 0
          else
            ./build/r3c test || exit 0
          fi

      # --------------------------------------
      # 8️⃣ Upload build artifacts
      # --------------------------------------
      - name: Upload Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: |
            build/r3c*
            b/Release/r3c.exe
            build/Release/r3c.exe

  # --------------------------------------
  # ✅ Auto Release when tagging
  # --------------------------------------
  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        run: |
          echo "R3C Release $(date)" > release_notes.txt
          git log -1 --pretty=format:"%h - %s (%an)" >> release_notes.txt

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.txt
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
