name: R3C Autonomous Build & Release (v16-final)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1️⃣ Checkout repository
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup environment
      - name: ⚙️ Setup environment
        shell: bash
        run: |
          echo "Setting up environment for $RUNNER_OS"
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake g++ zip
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install cmake zip || true
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install zip -y || echo "zip already available"
          fi

      # 3️⃣ Generate stubs
      - name: 🧩 Generate stubs (Cross-Platform)
        shell: bash
        run: |
          echo "Detecting stub generator..."
          if [ "$RUNNER_OS" = "Windows" ]; then
            if [ -f "scripts/generate_stubs.ps1" ]; then
              pwsh scripts/generate_stubs.ps1
            else
              echo "No PowerShell stub found."
            fi
          else
            if [ -f "scripts/generate_stubs.sh" ]; then
              bash scripts/generate_stubs.sh
            else
              echo "No Bash stub found."
            fi
          fi

      # 4️⃣ Build project
      - name: 🏗️ Build project
        shell: bash
        run: |
          cmake -B build -S .
          cmake --build build --config Release

      # 5️⃣ Package artifacts (unique filename per run)
      - name: 🗜️ Package Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          ZIPNAME="r3c-${{ runner.os }}-${{ github.run_id }}.zip"
          if [ "$RUNNER_OS" = "Windows" ]; then
            pwsh -Command "Compress-Archive -Path build/* -DestinationPath artifacts/$ZIPNAME"
          else
            zip -r "artifacts/$ZIPNAME" build/
          fi
          echo "✅ Created artifact: $ZIPNAME"
          ls -lh artifacts

      # 6️⃣ Upload artifacts
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}
          path: artifacts/*.zip

  release:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      # 7️⃣ Checkout
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # 8️⃣ Download all OS artifacts
      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 9️⃣ Generate unique tag
      - name: 🏷️ Generate Tag
        id: tag
        run: |
          TAG="auto-stable-$(date +'%Y%m%d-%H%M%S')"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Generated tag: $TAG"

      # 🔟 Create release (overwrite safe)
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "R3C Stable Release - ${{ env.TAG }}"
          body: |
            🪶 **R3C Cross-Platform Autonomous Build**
            - Built automatically for Windows, macOS, and Linux.
            - Unique tag: ${{ env.TAG }}
            - Run ID: ${{ github.run_id }}
          files: artifacts/**/*.zip
          overwrite: true

      # ⓫ Retry if failed
      - name: 🩹 Retry Release (if needed)
        if: failure()
        run: |
          echo "⚠️ Release failed previously, retrying once..."
          gh release upload ${{ env.TAG }} artifacts/**/*.zip --clobber || echo "Retry failed."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ⓬ Confirm success
      - name: ✅ Done
        run: echo "🎉 Release completed successfully for tag: ${{ env.TAG }}"
