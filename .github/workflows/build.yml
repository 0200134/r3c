# ==========================================================
# 🔖 R3C Autonomous Multi-OS Auto Release (Full Stable)
# ==========================================================
name: 🔖 Auto Stable Multi-OS Release (R3C · No LLVM · LTSS)

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * 0"       # 매주 일요일 새벽 3시 (UTC)
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build & Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      # ===============================
      # 🧩 Setup & Build
      # ===============================
      - uses: actions/checkout@v4

      - uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.28.3"

      - name: Configure & Build
        shell: bash
        run: |
          echo "🧱 Building on $RUNNER_OS"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -B build -S . -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
            cmake --build build --config Release
          else
            cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
            cmake --build build --config Release -j4
          fi

      # ===============================
      # ⚙️ Output Generation
      # ===============================
      - name: Generate Output
        shell: bash
        run: |
          mkdir -p build/out
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./build/Release/r3c_cli.exe --outdir build/out || echo "⚠️ CLI output failed, continuing."
          else
            ./build/r3c_cli --outdir build/out || echo "⚠️ CLI output failed, continuing."
          fi

      # ===============================
      # 📦 Package
      # ===============================
      - name: Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          cp -r build/out dist/ || true
          tar -czf r3c-${{ matrix.os }}.tar.gz -C dist .
          echo "✅ Created r3c-${{ matrix.os }}.tar.gz"
          ls -lh r3c-${{ matrix.os }}.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: r3c-${{ matrix.os }}.tar.gz
          if-no-files-found: error

  # ==========================================================
  # 🏷️ Stable Tag + Multi-OS Release
  # ==========================================================
  release:
    name: 🏷️ Tag & Create Stable Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_assets

      - name: Verify artifacts
        shell: bash
        run: |
          echo "Artifacts downloaded:"
          ls -R ./release_assets
          find ./release_assets -type f -size +1c || (echo "❌ No valid files found!" && exit 1)

      # Generate checksum
      - name: Generate SHA256SUMS
        shell: bash
        run: |
          find ./release_assets -type f -name "*.tar.gz" -exec sha256sum {} \; > SHA256SUMS.txt
          cat SHA256SUMS.txt

      # Generate changelog
      - name: Generate Changelog
        shell: bash
        run: |
          echo "### 🧱 R3C Auto Release Log" > CHANGELOG.md
          echo "- Date: $(date)" >> CHANGELOG.md
          echo "- Auto generated by CI/CD (Stable Tag)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log -1 --pretty=format:"- %s (%h)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md

      # Auto-tag creation
      - name: Create Stable Tag
        id: tagger
        shell: bash
        run: |
          TAG="v$(date +'%y.%m.%d-%H%M')-stable"
          echo "🪶 Tagging release as $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Auto stable tag ($TAG)"
          git push origin "$TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      # Publish release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.tag }}
          name: "🔖 R3C Stable Multi-OS Release (No LLVM)"
          body_path: CHANGELOG.md
          files: |
            ./release_assets/**/*.tar.gz
            SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
