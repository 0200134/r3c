name: R3C Solo Autonomous Build (v13-cross-safe)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1️⃣ 리포지토리 체크아웃
      - name: 🧩 Checkout
        uses: actions/checkout@v4

      # 2️⃣ OS별 환경 설정
      - name: ⚙️ Setup Environment
        run: |
          echo "Running on $RUNNER_OS"
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake g++ zip
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install cmake zip
          fi
        shell: bash

      # 3️⃣ 스텁 생성 스크립트 실행
      - name: 🧩 Generate stubs (Cross-Platform)
        run: |
          if [ -f scripts/generate_stubs.sh ]; then
            bash scripts/generate_stubs.sh
          elif [ -f scripts/generate_stubs.ps1 ]; then
            pwsh scripts/generate_stubs.ps1
          else
            echo "No stub generation script found. Skipping..."
          fi

      # 4️⃣ 빌드 실행
      - name: 🏗️ Build project
        run: |
          cmake -B build -S .
          cmake --build build --config Release

      # 5️⃣ 아티팩트 패키징 (zip 생성)
      - name: 🗜️ Package Artifacts
        run: |
          mkdir -p artifacts
          zip -r artifacts/r3c_${{ runner.os }}.zip build/
          echo "✅ Artifacts created:"
          ls -lh artifacts

      # 6️⃣ 아티팩트 업로드 (워크플로 내 보존용)
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}
          path: artifacts/*.zip

      # 7️⃣ 디버그용 파일 목록 확인
      - name: 🧪 Verify Artifacts
        run: |
          echo "Listing artifacts directory..."
          ls -R artifacts || echo "❌ No artifacts found!"
