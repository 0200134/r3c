name: 🧩 R3C Full Auto Build + Release (v5.1 Hotfix Final)

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 6 * * *" # 매일 6시 트래픽 그래프 갱신
  workflow_dispatch:

jobs:
  build:
    name: 🧱 Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4

      # ⚙️ Windows only: NASM 설치 (CMake/zip 이미 기본 내장)
      - name: 🧰 Install NASM (Windows only)
        if: runner.os == 'Windows'
        run: |
          choco clean --yes || echo "skip clean"
          choco install nasm -y --no-progress

      - name: ⚙️ Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.28.3"

      - name: 🧩 Configure build
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: 🧱 Build
        run: cmake --build build --config Release -j4

      - name: 🪶 Package artifacts
        run: |
          cd build
          zip -r "r3c-${RUNNER_OS,,}-latest.zip" r3c* || 7z a "r3c-${RUNNER_OS,,}-latest.zip" r3c*
          echo "✅ Compression done"

      - name: 🧮 Generate SHA256
        run: |
          cd build
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            certutil -hashfile "r3c-${RUNNER_OS,,}-latest.zip" SHA256 > "r3c-${RUNNER_OS,,}-sha256.txt"
          else
            sha256sum "r3c-${RUNNER_OS,,}-latest.zip" > "r3c-${RUNNER_OS,,}-sha256.txt"
          fi

      - name: ⬆️ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}-latest
          path: build/r3c-${{ runner.os,, }}-*

  release:
    name: 🚀 Auto Release + Graph + README
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-stable-${{ github.run_id }}
          name: "R3C Stable Release (${{ github.run_id }})"
          body: |
            ✅ LLVM-Free Cross-Platform Build  
            ✅ SHA256 Verified  
            ✅ Auto Traffic Graph + README Update  
            ✅ Windows Cancel Bug Patched
          files: release_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 📊 트래픽 그래프 생성
      - name: 📈 Generate traffic graph
        run: |
          pip install matplotlib requests pandas
          python3 <<'PY'
          import os, requests, pandas as pd, matplotlib.pyplot as plt
          repo = os.getenv("GITHUB_REPOSITORY")
          token = os.getenv("GITHUB_TOKEN")
          headers = {"Authorization": f"token {token}"}
          def df(endpoint): 
              data = requests.get(f"https://api.github.com/repos/{repo}/traffic/{endpoint}", headers=headers).json()
              df = pd.DataFrame(data[endpoint])
              df['timestamp'] = pd.to_datetime(df['timestamp'])
              return df
          v, c = df('views'), df('clones')
          plt.figure(figsize=(8,4))
          plt.plot(v['timestamp'], v['count'], label='Views', linewidth=2)
          plt.plot(c['timestamp'], c['count'], label='Clones', linewidth=2)
          plt.title('R3C Traffic (14 Days)')
          plt.xlabel('Date'); plt.ylabel('Count')
          plt.legend(); plt.grid(alpha=0.3); plt.tight_layout()
          os.makedirs('docs', exist_ok=True)
          plt.savefig('docs/traffic.png')
          PY

      # 🧾 README 자동 업데이트
      - name: 🧾 Update README
        run: |
          TAG="auto-stable-${{ github.run_id }}"
          URL="https://github.com/${{ github.repository }}/releases/tag/${TAG}"
          HASH_FILES=$(find release_artifacts -type f -name "*sha256.txt" | sort)
          echo "### 🔖 Latest Auto Release: [${TAG}](${URL})" > tmp.md
          echo "" >> tmp.md
          for f in $HASH_FILES; do
            echo "\`\`\`" >> tmp.md
            cat $f >> tmp.md
            echo "\`\`\`" >> tmp.md
            echo "" >> tmp.md
          done
          echo "![Traffic Graph](docs/traffic.png)" >> tmp.md
          sed -i '/### 🔖 Latest Auto Release/,$d' README.md || true
          cat tmp.md >> README.md
          rm tmp.md

      - name: 💾 Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md docs/traffic.png
          git commit -m "📊 Auto-update README & traffic graph" || echo "No changes"
          git push origin main
