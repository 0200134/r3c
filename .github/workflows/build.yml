name: R3C Autonomous Build & Release (v17-failsafe)

on:
  push:                     # 모든 브랜치 트리거
    branches-ignore: []     # 무시 없음
  pull_request:
    branches: [ "*" ]       # 모든 브랜치 PR 허용
  workflow_dispatch:        # 수동 실행 허용

permissions:
  contents: write           # 릴리스용 파일 푸시 가능
  packages: write
  issues: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1️⃣ Checkout
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Environment setup
      - name: ⚙️ Setup environment
        shell: bash
        run: |
          echo "Setting up environment for $RUNNER_OS"
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake g++ zip
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install cmake zip || true
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install cmake zip -y || echo "already ok"
          fi

      # 3️⃣ Generate stubs
      - name: 🧩 Generate stubs (Cross-Platform)
        shell: bash
        run: |
          echo "Detecting stub generator..."
          if [ "$RUNNER_OS" = "Windows" ]; then
            if [ -f "scripts/generate_stubs.ps1" ]; then
              pwsh scripts/generate_stubs.ps1
            else
              echo "No PowerShell stub found."
            fi
          else
            if [ -f "scripts/generate_stubs.sh" ]; then
              bash scripts/generate_stubs.sh
            else
              echo "No Bash stub found."
            fi
          fi

      # 4️⃣ Build
      - name: 🏗️ Build project
        shell: bash
        run: |
          cmake -B build -S .
          cmake --build build --config Release

      # 5️⃣ Package
      - name: 🗜️ Package artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          ZIPNAME="r3c-${{ runner.os }}-${{ github.run_id }}.zip"
          if [ "$RUNNER_OS" = "Windows" ]; then
            pwsh -Command "Compress-Archive -Path build/* -DestinationPath artifacts/$ZIPNAME"
          else
            zip -r "artifacts/$ZIPNAME" build/
          fi
          echo "✅ Created artifact: $ZIPNAME"
          ls -lh artifacts

      # 6️⃣ Upload artifacts
      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}
          path: artifacts/*.zip

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # PR일 때는 skip

    steps:
      # 7️⃣ Checkout
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # 8️⃣ Download all OS artifacts
      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 9️⃣ Generate unique tag
      - name: 🏷️ Generate Tag
        id: tag
        run: |
          TAG="auto-stable-$(date +'%Y%m%d-%H%M%S')"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Generated tag: $TAG"

      # 🔟 Create GitHub Release (safe overwrite)
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "R3C Stable Release - ${{ env.TAG }}"
          body: |
            🪶 **R3C Autonomous Build & Release (v17-failsafe)**
            - Built for Windows, macOS, Linux
            - Auto-triggered from: `${{ github.ref_name }}`
            - Run ID: `${{ github.run_id }}`
          files: artifacts/**/*.zip
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Done
      - name: ✅ Confirm success
        run: echo "🎉 Release completed successfully: ${{ env.TAG }}"
