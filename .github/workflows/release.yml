# =========================================================
# 📦 .github/workflows/release.yml (v2)
# R3C Cross-Platform Build & Release Pipeline (Safe Mode)
# =========================================================

name: R3C Cross-Platform Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # -----------------------------
      # ✅ OS별 의존성 설치
      # -----------------------------
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install -y cmake nasm
          RefreshEnv
          where nasm
          cmake --version

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install cmake nasm || true

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y cmake nasm

      # -----------------------------
      # 🧾 소스 파일 디버그 출력
      # -----------------------------
      - name: Debug source files
        run: |
          echo "Source files under src/:"
          find src -type f || echo "src not found"

      # -----------------------------
      # ⚙️ 안전한 빌드 모드
      # -----------------------------
      - name: Configure & Build (safe)
        shell: bash
        run: |
          echo "🧹 Clean build directory"
          rm -rf build
          mkdir -p build
          echo "⚙️ Configuring project..."
          cmake -B build -S . -DR3C_BUILD_TESTS=OFF || { echo "❌ CMake failed"; exit 1; }
          echo "🔨 Building..."
          cmake --build build --config Release -j4 || { echo "❌ Build failed"; exit 1; }
          echo "✅ Build complete"

      # -----------------------------
      # ✅ 바이너리 검증
      # -----------------------------
      - name: Verify binary
        shell: bash
        run: |
          if [ -f "build/r3c" ] || [ -f "build/r3c.exe" ]; then
            echo "✅ Binary exists"
          else
            echo "❌ Binary missing"
            exit 1
          fi

      # -----------------------------
      # 📤 아티팩트 업로드
      # -----------------------------
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ runner.os }}
          path: |
            build/r3c
            build/r3c.exe
            build/*.asm
            build/*.obj
            build/*.elf
            !build/CMakeFiles/**

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show artifact list
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "R3C ${{ github.ref_name }} Release"
          body: |
            🚀 **R3C ${{ github.ref_name }} Cross-Platform Build**

            Includes binaries for:
            - 🪟 Windows
            - 🐧 Linux (Ubuntu)
            - 🍎 macOS

            Built automatically via GitHub Actions.
          files: artifacts/**
