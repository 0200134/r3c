name: 🔖 Auto Stable Tag, Banner & Traffic (Self-Alive Ecosystem)

on:
  push:
    branches: [main]
  schedule:
    # 매년 1월 1일 자동 릴리스 + 매주 일요일 배너 갱신
    - cron: "0 0 1 1 *"
    - cron: "0 3 * * 0"
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  release:
    name: 🧱 Cross-Platform Auto Build & Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Setup Git Environment
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🧩 Build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "🏗️ Building on Windows..."
          mkdir build
          cmake -B build -S . -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          Write-Host "✅ Windows build complete."

      - name: 🧩 Build on Unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "🏗️ Building on Unix ($RUNNER_OS)..."
          mkdir -p build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release -j$(nproc)
          echo "✅ Build complete for $RUNNER_OS"

      - name: 📦 Package Build Artifacts
        run: |
          mkdir -p dist/${{ matrix.os }}
          cp -r build/* dist/${{ matrix.os }}/ || true
          echo "✅ Packaged artifacts for ${{ matrix.os }}"

      - name: 💾 Upload OS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: dist/${{ matrix.os }}

  tag_release:
    name: 🚀 Tag, Publish Release, Refresh Token, Update Banner
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📦 Download all OS Artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged_artifacts

      - name: 🧩 Merge all build artifacts
        run: |
          echo "📦 Merging artifacts..."
          mkdir -p release_assets
          cp -r merged_artifacts/* release_assets/
          tar -czf r3c_full_assets_${{ github.run_id }}.tar.gz release_assets
          echo "✅ Assets ready for release."

      - name: 🏷️ Create Auto Stable Tag
        id: tag
        run: |
          VERSION="v$(date +'%y.%m.%d-%H%M')-stable"
          git tag -a "$VERSION" -m "Auto Stable Release ($VERSION)"
          git push origin "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🧾 Generate Changelog
        id: changelog
        run: |
          echo "🧾 Generating changelog..."
          git log -10 --pretty=format:"- %s (%h)" > CHANGELOG.md
          echo "✅ Changelog created."
          echo "log<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: 🔖 Auto Stable Release — ${{ steps.tag.outputs.version }}
          body: |
            🔄 **Automated Cross-Platform Stable Release**
            - Repository: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Generated on: ${{ github.run_id }}
            - Platforms: Linux, macOS, Windows
            - Recent Commits:
            ${{ steps.changelog.outputs.log }}
          files: |
            r3c_full_assets_${{ github.run_id }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # 🔁 Auto Banner + Traffic Update
      # ================================================================
      - name: 🪄 Auto Update README Banner & Traffic Stats
        run: |
          echo "📊 Updating banner and traffic data..."
          pip install requests matplotlib
          python scripts/update_banner.py
          git add README.md || true
          git commit -m "📈 Auto-update README banner" || echo "No changes"
          git push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # 🔑 Refresh GitHub App Token (safe)
      # ================================================================
      - name: 🔑 Refresh GitHub App Token (if App secrets exist)
        if: ${{ env.APP_PRIVATE_KEY_EXISTS == 'true' }}
        env:
          APP_PRIVATE_KEY_EXISTS: ${{ secrets.APP_PRIVATE_KEY != null }}
          APP_ID: ${{ secrets.APP_ID }}
          APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
        run: |
          echo "🔄 Refreshing installation token..."
          npm install -g jsonwebtoken
          echo "$APP_PRIVATE_KEY" > key.pem
          node -e "
            const fs = require('fs');
            const jwt = require('jsonwebtoken');
            const key = fs.readFileSync('key.pem');
            const token = jwt.sign(
              { iss: process.env.APP_ID },
              key,
              { algorithm: 'RS256', expiresIn: '9m' }
            );
            console.log('JWT=' + token);
          " > jwt.txt

          export JWT=$(grep 'JWT=' jwt.txt | cut -d= -f2)
          curl -s -X POST \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/${APP_INSTALLATION_ID}/access_tokens \
            -o token.json
          cat token.json | jq -r '.token' > refreshed_token.txt
          echo "🔐 Token refreshed successfully"
          echo "Partial token preview: $(head -c 20 refreshed_token.txt)****"

      - name: ✅ Print Summary
        run: |
          echo "🎉 Multi-OS Auto Stable Release, Banner, and Token Refresh Complete!"
          echo "📦 Tag: ${{ steps.tag.outputs.version }}"
          echo "📊 Banner updated."
          echo "🔐 Token refreshed (if App used)."
