name: 🔖 Auto Stable Tag & Release (Per-Platform Assets + Changelog + Banner Update)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  release:
    name: 🧱 Cross-Platform Auto Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # ================================================================
      # 🧰 1. Checkout
      # ================================================================
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # ================================================================
      # ⚙️ 2. Configure Git
      # ================================================================
      - name: ⚙️ Setup Git Environment
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ================================================================
      # 🧩 3-A. Build on Windows (PowerShell)
      # ================================================================
      - name: 🧩 Build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "🏗️ Building on Windows..."
          mkdir build
          cmake -B build -S . -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          Write-Host "✅ Windows build complete."

      # ================================================================
      # 🧩 3-B. Build on macOS/Linux (bash)
      # ================================================================
      - name: 🧩 Build on Unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "🏗️ Building on Unix ($RUNNER_OS)..."
          mkdir -p build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release -j$(nproc)
          echo "✅ Build complete for $RUNNER_OS"

      # ================================================================
      # 📦 4. Package (per platform)
      # ================================================================
      - name: 📦 Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a r3c_full_assets_windows.zip ./build/*
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            tar -czf r3c_full_assets_macos.tar.gz -C build .
          else
            tar -czf r3c_full_assets_linux.tar.gz -C build .
          fi
          echo "✅ Packaged $RUNNER_OS artifacts."

      # ================================================================
      # 💾 5. Upload each platform artifact
      # ================================================================
      - name: 💾 Upload Platform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: |
            *.tar.gz
            *.zip

  # ====================================================================
  # 🏷️ TAG + RELEASE + README UPDATE
  # ====================================================================
  tag_release:
    name: 🚀 Create Tag, Publish Release, and Update Banner
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Setup Git Identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ✅ 중복 방지 + 자동 증가 태그 생성
      - name: 🏷️ Create Auto Stable Tag (Safe)
        id: tag
        shell: bash
        run: |
          VERSION="v$(date +'%y.%m.%d-%H%M')-stable"

          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "⚠️ Tag $VERSION already exists. Generating new tag..."
            COUNT=1
            while git rev-parse "${VERSION}-${COUNT}" >/dev/null 2>&1; do
              COUNT=$((COUNT+1))
            done
            VERSION="${VERSION}-${COUNT}"
            echo "➡️ Using new tag: $VERSION"
          fi

          git tag -a "$VERSION" -m "Auto Stable Release ($VERSION)"
          git push origin "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 📦 Download all OS Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      - name: 🧾 Generate Changelog
        id: changelog
        shell: bash
        run: |
          echo "🧾 Generating changelog..."
          git log -10 --pretty=format:"- %s (%h)" > CHANGELOG.md
          echo "✅ Changelog created."
          LOG_CONTENT=$(cat CHANGELOG.md | sed ':a;N;$!ba;s/\n/\\n/g')
          printf "log=%s\n" "$LOG_CONTENT" >> "$GITHUB_OUTPUT"

      - name: 🚀 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: 🔖 Auto Stable Release — ${{ steps.tag.outputs.version }}
          body: |
            🔄 **Automated Cross-Platform Stable Release**
            - Repository: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Generated on: ${{ github.run_id }}
            - Platforms: Linux, macOS, Windows
            - Recent Commits:
            ${{ steps.changelog.outputs.log }}
          files: |
            release_assets/**/*.tar.gz
            release_assets/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # 🧠 README Banner Auto Update
      # ================================================================
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 🔁 Update README Banner
        run: |
          pip install requests
          python scripts/update_banner.py
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 💾 Commit Banner Update
        run: |
          git add README.md
          git diff --quiet && echo "No changes to commit." || git commit -m "🔁 Auto-update README banner"
          git push

      - name: ✅ Summary
        run: |
          echo "🎉 Auto Stable Release + README Banner Updated!"
          echo "📦 Tag: ${{ steps.tag.outputs.version }}"
