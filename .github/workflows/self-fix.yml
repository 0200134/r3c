name: 🔁 R3C Self-Fix Automation (v3 Safe)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize ]

jobs:
  self-fix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # =====================================================
      # 1️⃣ Checkout & Setup
      # =====================================================
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup CMake
        uses: jwlawson/actions-setup-cmake@v1

      # =====================================================
      # 2️⃣ Build
      # =====================================================
      - name: ⚙️ Configure project
        shell: bash
        run: cmake -B build -S . > build_log.txt 2>&1

      - name: 🧩 Build project
        id: build
        shell: bash
        continue-on-error: true
        run: cmake --build build -j4 >> build_log.txt 2>&1

      # =====================================================
      # 3️⃣ Self-Fix (safe conditional mode)
      # =====================================================
      - name: 🧠 Conditional self-repair
        if: ${{ steps.build.outcome == 'failure' }}
        shell: bash
        run: |
          echo "⚠️ Build failed — analyzing repair conditions..." >> build_log.txt
          mkdir -p include/nlohmann
          mkdir -p src
          # json.hpp 없는 경우만 생성
          if [ ! -f include/nlohmann/json.hpp ]; then
            echo "// 🩹 Auto-generated stub for missing json.hpp" > include/nlohmann/json.hpp
            echo "✅ json.hpp stub generated" >> build_log.txt
          fi
          # r3c_stub.cpp는 transpiler.cpp 없을 때만 생성
          if [ ! -f src/transpiler.cpp ]; then
            echo "// 🩹 Auto-generated stub for missing transpiler.cpp" > src/r3c_stub.cpp
            echo "✅ transpiler stub generated" >> build_log.txt
          else
            echo "✅ Real transpiler.cpp exists, skipping stub regen" >> build_log.txt
          fi

      # =====================================================
      # 4️⃣ Rebuild after conditional fix
      # =====================================================
      - name: 🔁 Rebuild after conditional fix
        if: ${{ steps.build.outcome == 'failure' }}
        shell: bash
        run: |
          echo "🔄 Rebuilding after conditional self-fix..." >> build_log.txt
          cmake -B build -S . >> build_log.txt 2>&1
          cmake --build build -j4 >> build_log.txt 2>&1 || echo "⚠️ Still failing after fix" >> build_log.txt

      # =====================================================
      # 5️⃣ CMake sanity check — ensure all sources included
      # =====================================================
      - name: 🧩 Ensure all sources included
        shell: bash
        run: |
          echo "Verifying that transpiler.cpp and pipeline.cpp are part of build..."
          grep -q "transpiler.cpp" CMakeLists.txt || echo "⚠️ transpiler.cpp not found in CMakeLists.txt" >> build_log.txt
          grep -q "pipeline.cpp" CMakeLists.txt || echo "⚠️ pipeline.cpp not found in CMakeLists.txt" >> build_log.txt

      # =====================================================
      # 6️⃣ Commit & Push Fix (optional)
      # =====================================================
      - name: 📤 Commit & Push auto-fix
        if: ${{ steps.build.outcome == 'failure' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          git config user.name "r3c-bot"
          git config user.email "r3c-bot@users.noreply.github.com"
          git add include/nlohmann/json.hpp src/r3c_stub.cpp || true
          git commit -m "🩹 self-fix: conditional stub regeneration (safe mode)" || true
          git push origin HEAD:${{ github.ref }} || echo "⚠️ Push skipped (no permission)" >> build_log.txt

      # =====================================================
      # 7️⃣ Create issue if still fails
      # =====================================================
      - name: 🪄 Create issue from build log
        if: ${{ steps.build.outcome == 'failure' }}
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "❌ Build failed on ${{ runner.os }} — Safe Self-Fix Attempted"
          content-filepath: build_log.txt
          labels: |
            auto-fix
            ci-failure

      # =====================================================
      # 8️⃣ Summary
      # =====================================================
      - name: 🧾 Summary
        shell: bash
        run: |
          echo "=====================================================" >> build_log.txt
          echo "R3C Self-Fix (Safe Mode) Summary" >> build_log.txt
          echo "=====================================================" >> build_log.txt
          cat build_log.txt
