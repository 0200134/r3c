name: R3C Solo Autonomous Build & Stable Release (v16-final)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Build Tools
        shell: bash
        run: |
          case "$RUNNER_OS" in
            "Linux") sudo apt-get update && sudo apt-get install -y cmake nasm zip ;;
            "macOS") brew install cmake nasm zip || true ;;
            "Windows") choco install cmake nasm zip -y ;;
          esac

      - name: 🪶 Generate Stub Sources
        shell: bash
        run: |
          echo "🧩 Generating stub source files..."
          if [ -f scripts/generate_stubs.sh ]; then
            chmod +x scripts/generate_stubs.sh
            ./scripts/generate_stubs.sh
          else
            echo "⚠️ No stub generator found, skipping..."
          fi
          echo "✅ Stub generation completed."

      - name: 🔧 Configure
        shell: bash
        run: cmake -B build -S . -DCMAKE_CXX_FLAGS="-Iinclude"

      - name: 🏗️ Build Project
        shell: bash
        run: |
          echo "⚙️ Building on $RUNNER_OS..."
          cmake --build build --config Release --parallel 4

      # ✅ ZIP 파일 확실히 생성
      - name: 📦 Package build outputs
        if: success()
        shell: bash
        run: |
          mkdir -p artifacts
          zip -r artifacts/r3c-${{ matrix.os }}.zip build/
          echo "✅ Created artifacts/r3c-${{ matrix.os }}.zip"

      # ✅ OS별 아티팩트 업로드
      - name: ⬆️ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: artifacts/*.zip
          retention-days: 30

  release:
    name: 🚀 Auto Tag & Stable Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4

      # ✅ 모든 플랫폼 아티팩트 다운로드 (이름 패턴 일치)
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: r3c-*
          path: release_artifacts
          merge-multiple: true

      - name: 🔍 Verify Artifacts
        run: |
          echo "📂 Listing release_artifacts..."
          ls -R release_artifacts || (echo "❌ No artifacts found!" && exit 1)

      # ✅ 항상 유니크한 태그 생성 (타임스탬프 포함)
      - name: 🏷️ Create Git Tag
        run: |
          TAG="auto-stable-$(date +'%Y%m%d-%H%M%S')"
          echo "🔖 Creating tag: $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      # ✅ 릴리스 생성 (이전 충돌 방지 완전 버전)
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "R3C Stable Auto Release (${{ env.TAG }})"
          body: |
            🧱 R3C Cross-Platform Autonomous Build
            ✅ Platforms: Linux, macOS, Windows
            ⚙️ LLVM-Free Pipeline (C++ → Rust → ASM)
            🔄 Automated build, stub generation, and packaging
          files: |
            release_artifacts/**/*.zip
            release_artifacts/*.zip
