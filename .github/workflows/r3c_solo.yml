name: R3C Solo Autonomous Build (v14-cross-safe-release)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4

      - name: 🧩 Prepare JSON dependency
        shell: bash
        run: |
          mkdir -p include/nlohmann
          if [ ! -f include/nlohmann/json.hpp ]; then
            curl -fsSL https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp \
              -o include/nlohmann/json.hpp
          fi

      - name: ⚙️ Setup Build Tools
        shell: bash
        run: |
          case "$RUNNER_OS" in
            "Linux")
              sudo apt-get update && sudo apt-get install -y cmake nasm zip
              ;;
            "macOS")
              brew install cmake nasm zip || true
              ;;
            "Windows")
              choco install cmake nasm zip -y
              ;;
          esac

      # ✅ Stub 생성
      - name: 🪶 Generate Stub Sources
        shell: bash
        run: |
          echo "🧩 Generating stub source files..."
          chmod +x scripts/generate_stubs.sh
          ./scripts/generate_stubs.sh
          echo "✅ Stub generation completed."

      - name: 🔧 Configure
        shell: bash
        run: cmake -B build -S . -DCMAKE_CXX_FLAGS="-Iinclude"

      - name: 🏗️ Build Project
        id: build
        shell: bash
        run: |
          echo "⚙️ Building on $RUNNER_OS..."
          attempt=1
          while [ $attempt -le 3 ]; do
            echo "🔁 Attempt $attempt..."
            if cmake --build build --config Release --parallel 4; then
              echo "✅ Build success"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "⚠️ Build failed (attempt $attempt)"
              ((attempt++))
            fi
          done
          echo "❌ Build failed after 3 attempts"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      # ✅ ZIP 패키징 (이게 없어서 이전에 에러 발생)
      - name: 📦 Package artifacts
        if: success()
        shell: bash
        run: |
          echo "📦 Packaging build outputs..."
          mkdir -p artifacts
          zip -r artifacts/r3c-${{ matrix.os }}.zip build/
          echo "✅ Artifact created: artifacts/r3c-${{ matrix.os }}.zip"

      # ✅ 업로드 (각 OS별 결과)
      - name: ⬆️ Upload build artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: artifacts/*.zip
          retention-days: 30

  # ✅ 릴리스 job (Linux 성공 시만 실행)
  release:
    name: Release Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'

    steps:
      - name: 🧰 Checkout
        uses: actions/checkout@v4

      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 🔍 Debug artifacts
        run: ls -R artifacts

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-stable-v${{ github.run_number }}
          name: "R3C Auto Release v${{ github.run_number }}"
          body: |
            🔧 Automated Cross-Platform Build (v14)
            ✅ Platforms: Linux, macOS, Windows
            🧩 Includes stubs and JSON headers
          files: artifacts/**/*.zip
