name: 🔖 Auto Stable Multi-OS Release + SHA256 + PGP Sign (Final LTS Ecosystem)

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 0 1 1 *"     # 매년 1월 1일
    - cron: "0 3 * * 0"     # 매주 일요일 새벽 3시
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # ================================================================
  # 🧱 1. Build (Linux / macOS / Windows)
  # ================================================================
  build:
    name: 🧱 Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Setup Git Identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🧩 Configure & Build
        shell: bash
        run: |
          echo "🏗️ Building on $RUNNER_OS..."
          mkdir -p build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build build --config Release
          else
            cmake --build build --config Release -j$(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 4)
          fi
          echo "✅ Build complete for $RUNNER_OS"

      - name: 📦 Package Artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "Compress-Archive -Path 'build' -DestinationPath 'dist\\r3c-windows.zip' -Force"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            tar -czf dist/r3c-macos.tar.gz build
          else
            tar -czf dist/r3c-linux.tar.gz build
          fi
          echo "✅ Artifacts packaged for $RUNNER_OS"

      - name: 💾 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r3c-${{ matrix.os }}
          path: dist/*

  # ================================================================
  # 🚀 2. Tag + Release + Sign + README Update
  # ================================================================
  release:
    name: 🚀 Tag + Release + Sign + README Update
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🧰 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Setup Git Identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📦 Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged_artifacts

      - name: 🧾 Generate Changelog
        id: changelog
        run: |
          echo "🧾 Generating changelog..."
          git log -10 --pretty=format:"- %s (%h)" > CHANGELOG.md
          echo "✅ Changelog created."
          echo "log_path=CHANGELOG.md" >> $GITHUB_OUTPUT

      # ================================================================
      # 🏷️ Unique Tag (Collision-Safe)
      # ================================================================
      - name: 🏷️ Create Auto Tag (run_id-safe)
        id: tag
        run: |
          VERSION="v$(date +'%y.%m.%d-%H%M')-${{ github.run_id }}-stable"
          git tag -a "$VERSION" -m "Auto Stable Release ($VERSION)"
          git push origin "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # ================================================================
      # 🔐 SHA256 + PGP Sign
      # ================================================================
      - name: 🔐 Generate SHA256 + Optional PGP
        id: sign
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "🔍 Generating SHA256 checksums..."
          cd merged_artifacts
          find . -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec sha256sum {} \; > SHA256SUMS.txt
          echo "✅ SHA256 complete."

          if [ -n "$GPG_PRIVATE_KEY" ]; then
            echo "🔑 Importing GPG key..."
            echo "$GPG_PRIVATE_KEY" | gpg --batch --import
            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --armor --detach-sign -o SHA256SUMS.txt.asc SHA256SUMS.txt
            echo "✅ PGP signature created."
          else
            echo "⚠️ No GPG key found — skipping signature."
          fi

          echo "checksums_path=merged_artifacts/SHA256SUMS.txt" >> $GITHUB_OUTPUT
          cd ..

      # ================================================================
      # 🚀 Publish GitHub Release
      # ================================================================
      - name: 🚀 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: 🔖 Auto Stable Multi-OS Release — ${{ steps.tag.outputs.version }}
          body: |
            🔄 **Cross-Platform Stable Release**
            - Repository: ${{ github.repository }}
            - Commit: ${{ github.sha }}
            - Run ID: ${{ github.run_id }}
            - Platforms: Linux, macOS, Windows
            - Checksums: SHA256SUMS.txt (+ .asc if signed)
            - Recent Commits:
            $(cat ${{ steps.changelog.outputs.log_path }})
          files: |
            merged_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # 🐍 Install Python Dependencies (matplotlib fix)
      # ================================================================
      - name: 🐍 Setup Python + Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests matplotlib pillow

      # ================================================================
      # 🪄 Update README & Graph
      # ================================================================
      - name: 🪄 Auto Update README + Graph
        run: |
          echo "📊 Updating README..."
          python scripts/update_banner.py
          echo "\n\n### 🔐 Latest Checksums\n\`\`\`\n$(cat merged_artifacts/SHA256SUMS.txt)\n\`\`\`\n" >> README.md
          git add README.md || true
          git commit -m "📈 Auto-update README (graph + SHA256)" || echo "No changes"
          git push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # 🧩 Apply LTS README Template (Vision + Governance auto-merge)
      # ================================================================
      - name: 🧩 Apply LTS README Template
        run: |
          echo "🧩 Applying README-template-LTS.md..."
          VERSION=${{ steps.tag.outputs.version }}
          python <<'PYCODE'
          import os, re
          tpl_path = "scripts/README-template-LTS.md"
          if not os.path.exists(tpl_path):
              print("⚠️ README-template-LTS.md not found, skipping.")
              exit(0)

          template = open(tpl_path, encoding="utf-8").read()
          template = template.replace("$VERSION", os.getenv("VERSION", "v-latest"))

          if os.path.exists("README.md"):
              old = open("README.md", encoding="utf-8").read()
              match = re.search(r"### 🔐 Latest Checksums[\\s\\S]*", old)
              if match:
                  template += "\n\n" + match.group(0)

          with open("README.md", "w", encoding="utf-8") as f:
              f.write(template)
          PYCODE

          git add README.md
          git commit -m "🧩 Apply LTS README Template ($VERSION)" || true
          git push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================================================
      # ✅ Summary
      # ================================================================
      - name: ✅ Summary
        run: |
          echo "🎉 Auto Stable Release + README(LTS) completed successfully!"
          echo "📦 Tag: ${{ steps.tag.outputs.version }}"
          echo "🔐 Checksums generated and README updated."
