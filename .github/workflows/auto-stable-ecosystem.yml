name: 🔖 Auto Stable Multi-OS Release (Final LTS Ecosystem)

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 0 1 1 *"
    - cron: "0 3 * * 0"
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write
  workflows: write

jobs:
  # ================================================================
  # 🧱 Build per OS
  # ================================================================
  build:
    name: 🧱 Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🧩 Configure & Build
        shell: bash
        run: |
          echo "🏗️ Building on $RUNNER_OS..."
          mkdir -p build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build build --config Release
          else
            cmake --build build --config Release -j$(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 4)
          fi
          echo "✅ Build complete for $RUNNER_OS"

      - name: 📦 Package artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pwsh -Command "Compress-Archive -Path 'build' -DestinationPath 'dist\\r3c-windows.zip' -Force"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            tar -czf dist/r3c-macos.tar.gz build
          else
            tar -czf dist/r3c-linux.tar.gz build
          fi

      - name: 💾 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist/*

  # ================================================================
  # 🚀 Release + README + Traffic Integration
  # ================================================================
  release:
    name: 🚀 Tag + Release + README + Traffic Update
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup Git Identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged_artifacts

      - name: 🏷️ Create Safe Tag
        id: tag
        run: |
          git fetch --tags
          VERSION="v$(date +'%y.%m.%d-%H%M')-${{ github.run_id }}-stable"
          echo "Creating tag: $VERSION"
          git tag -a "$VERSION" -m "Auto Stable Multi-OS Release ($VERSION)"
          git push origin "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔐 Generate SHA256 Checksums
        run: |
          cd merged_artifacts
          find . -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec sha256sum {} \; | sort -k2 > SHA256SUMS.txt
          cd ..

      - name: 🧠 Generate Banner Graph
        run: |
          python scripts/update_banner.py || echo "⚠️ Banner skipped"

      # ============================================================
      # 🌸 트래픽 + 로그 + 스타 수집 (릴리스 본문에 사용)
      # ============================================================
      - name: 📊 Collect Traffic Summary
        id: traffic
        run: |
          python scripts/traffic_autolog_full.py || echo "⚠️ Traffic log skipped"

          # 간단한 JSON 요약 (views, clones, stars)
          echo "views=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/traffic/views | jq '.count')" >> $GITHUB_OUTPUT
          echo "clones=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/traffic/clones | jq '.count')" >> $GITHUB_OUTPUT
          echo "stars=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }} | jq '.stargazers_count')" >> $GITHUB_OUTPUT

      - name: 🪄 Update README (Clean Replace Mode)
        run: |
          sed -i '/^Traffic Graph$/d' README.md
          sed -i '/traffic_graph.png/d' README.md
          echo -e "\nTraffic Graph\n\n![Traffic Graph](traffic_graph.png)\n" >> README.md

          sed -i '/^### 🔐 Latest Checksums$/,$d' README.md
          echo -e "\n### 🔐 Latest Checksums\n\`\`\`\n$(cat merged_artifacts/SHA256SUMS.txt)\n\`\`\`\n" >> README.md
          echo -e "\n_Last auto-update: $(date '+%Y-%m-%d %H:%M:%S UTC')_" >> README.md

          git add README.md traffic_graph.png || true
          git diff --quiet && echo "✅ No doc changes." || (git commit -m "📈 Auto-update README (Graph + Checksum + Traffic)" && git push)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: 🔖 Multi-OS Platform Release — ${{ steps.tag.outputs.version }}
          body: |
            🔄 **Cross-Platform Stable Release**
            - Repository: ${{ github.repository }}
            - Run ID: ${{ github.run_id }}
            - Platforms: Linux, macOS, Windows
            - Checksums: SHA256SUMS.txt

            ### 📊 Traffic Summary
            - 👁 Views (14d): ${{ steps.traffic.outputs.views }}
            - 🧭 Clones (14d): ${{ steps.traffic.outputs.clones }}
            - ⭐ Stars: ${{ steps.traffic.outputs.stars }}

            _Generated automatically by r3c Foundation CI_
          files: |
            merged_artifacts/**/r3c-linux.tar.gz
            merged_artifacts/**/r3c-macos.tar.gz
            merged_artifacts/**/r3c-windows.zip
            merged_artifacts/**/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
